---
import BaseLayout from "@layouts/BaseLayout.astro";
import CTA from "@components/CTA.astro";

// Define the animal interface
interface Animal {
  id: string | number;
  name: string;
  breed: string;
  age: string;
  gender: string;
  size: string;
  weight?: string;
  status?: string;
  description?: string;
  description_long?: string;
  image_url?: string;
  main_image?: { url: string };
  additional_image_1?: { url: string };
  additional_image_2?: { url: string };
  additional_image_3?: { url: string };
  additional_image_4?: { url: string };
  spayed_neutered?: boolean;
  vaccinated?: boolean;
  microchip?: boolean;
  special_needs?: boolean;
  medical_notes?: string;
  good_with_kids?: boolean;
  good_with_cats?: boolean;
  good_with_dogs?: boolean;
  energy_level?: string;
  house_trained?: boolean;
}

// Generate static paths for all animals
export async function getStaticPaths() {
  // For now, return fallback animal IDs to ensure the pages work
  // In production, you might want to fetch from your actual API
  const fallbackIds = ['luna', 'max'];

  try {
    // Try to fetch from API if available
    const response = await fetch(`http://localhost:4322/api/admin/animals?orgId=9`);
    if (response.ok) {
      const animals = await response.json();
      console.log('✅ Static paths generated for animals:', animals.map(a => a.id));
      return animals.map(animal => ({
        params: { id: animal.id.toString() }
      }));
    }
  } catch (error) {
    console.error('Error fetching animals for static paths, using fallback:', error);
  }

  // Fallback to predefined IDs if API fails
  return fallbackIds.map(id => ({
    params: { id: id.toString() }
  }));
}

// Get the animal ID from the URL
const { id } = Astro.params;

// Fetch animal data from API
let animal: Animal | null = null;
try {
  const response = await fetch(`${Astro.url.origin}/api/admin/animals?orgId=9`);
  if (response.ok) {
    const animals = await response.json();
    animal = animals.find(a => a.id.toString() === id);
  }
} catch (error) {
  console.error('Error fetching animal details:', error);
}

// Fallback animal data if API fails
const fallbackAnimals: Record<string, Animal> = {
  "luna": {
    id: "luna",
    name: "Luna",
    breed: "Golden Retriever Mix",
    age: "3 years",
    gender: "Female",
    size: "Large",
    weight: "65 lbs",
    status: "Available",
    description: "Luna is a sweet and gentle girl who loves playing fetch and cuddling on the couch. She's been with us for a few months and has shown incredible resilience and love despite her difficult past.",
    image_url: "/assets/images/animals/luna-1.jpg",
    spayed_neutered: true,
    vaccinated: true,
    microchip: true,
    special_needs: false,
    medical_notes: "Healthy and ready for adoption",
    good_with_kids: true,
    good_with_cats: true,
    good_with_dogs: true,
    energy_level: "Medium",
    house_trained: true
  },
  "max": {
    id: "max",
    name: "Max",
    breed: "Domestic Shorthair",
    age: "2 years",
    gender: "Male",
    size: "Medium",
    weight: "12 lbs",
    status: "Available",
    description: "Max is a playful tabby who loves toys and sunny windowsills. He's a curious cat who enjoys exploring and would do well in a home with plenty of enrichment.",
    image_url: "/assets/images/animals/max-1.jpg",
    spayed_neutered: true,
    vaccinated: true,
    microchip: true,
    special_needs: false,
    medical_notes: "Healthy young cat",
    good_with_kids: true,
    good_with_cats: true,
    good_with_dogs: false,
    energy_level: "High",
    house_trained: true
  }
};

// If animal not found from API, try fallback data
if (!animal) {
  animal = fallbackAnimals[id];
}

// If still not found, redirect to 404
if (!animal) {
  return Astro.redirect('/404');
}

// Type assertion to help TypeScript understand animal is not null
const safeAnimal = animal as Animal;


---

<BaseLayout
  title={`Mission Bay Puppy Rescue - Meet ${safeAnimal.name}`}
  description={`Learn more about ${safeAnimal.name}, a ${safeAnimal.age} ${safeAnimal.breed} looking for a loving home. ${safeAnimal.description}`}
>
  <!-- ============================================ -->
  <!--              Animal Details Header           -->
  <!-- ============================================ -->
  
  <section id="animal-header">
    <div class="cs-container">
      <div class="cs-content">
        <div class="cs-image-gallery">
          <div class="cs-main-image">
            <img
              src={safeAnimal.image_url || safeAnimal.main_image?.url || '/assets/images/animals/placeholder.jpg'}
              alt={safeAnimal.name}
              width="600"
              height="400"
              loading="eager"
            />
          </div>
          <div class="cs-thumbnail-gallery">
            {[
              safeAnimal.main_image?.url,
              safeAnimal.additional_image_1?.url,
              safeAnimal.additional_image_2?.url,
              safeAnimal.additional_image_3?.url,
              safeAnimal.additional_image_4?.url
            ].filter(Boolean).map((image, index) => (
              <img
                src={image}
                alt={`${safeAnimal.name} photo ${index + 1}`}
                width="100"
                height="100"
                class={index === 0 ? "active" : ""}
                data-main-src={image}
              />
            ))}
          </div>
        </div>
        
        <div class="cs-info">
          <div class="cs-status-badge cs-status-{safeAnimal.status?.toLowerCase() || 'available'}">
            {safeAnimal.status || 'Available'}
          </div>
          <h1 class="cs-title">{safeAnimal.name}</h1>
          <div class="cs-basic-info">
            <div class="cs-info-item">
              <strong>Breed:</strong> {safeAnimal.breed}
            </div>
            <div class="cs-info-item">
              <strong>Age:</strong> {safeAnimal.age}
            </div>
            <div class="cs-info-item">
              <strong>Gender:</strong> {safeAnimal.gender}
            </div>
            <div class="cs-info-item">
              <strong>Size:</strong> {safeAnimal.size}
            </div>
            <div class="cs-info-item">
              <strong>Weight:</strong> {safeAnimal.weight}
            </div>
          </div>

          <div class="cs-description" set:html={safeAnimal.description?.replace(/\n/g, '<br>').replace(/�/g, "'") || ''}></div>

          <div class="cs-action-buttons">
            <a href="/applications" class="cs-button-solid">Apply to Adopt {safeAnimal.name}</a>
            <a href="/contact" class="cs-button-transparent">Ask About {safeAnimal.name}</a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- ============================================ -->
  <!--              Detailed Information            -->
  <!-- ============================================ -->
  
  <section id="animal-details">
    <div class="cs-container">
      <div class="cs-details-grid">
        <!-- Story -->
        <div class="cs-detail-card">
          <h2>About {safeAnimal.name}</h2>
          <div class="cs-story" set:html={(safeAnimal.description_long || safeAnimal.description)?.replace(/\n/g, '<br>').replace(/�/g, "'") || ''}></div>
        </div>

        <!-- Medical Information -->
        <div class="cs-detail-card">
          <h2>Medical Information</h2>
          <div class="cs-medical-info">
            <div class="cs-medical-item">
              <span class="cs-label">Spayed/Neutered:</span>
              <span class={`cs-value ${safeAnimal.spayed_neutered ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.spayed_neutered ? 'Yes' : 'No'}
              </span>
            </div>
            <div class="cs-medical-item">
              <span class="cs-label">Vaccinated:</span>
              <span class={`cs-value ${safeAnimal.vaccinated ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.vaccinated ? 'Yes' : 'No'}
              </span>
            </div>
            <div class="cs-medical-item">
              <span class="cs-label">Microchipped:</span>
              <span class={`cs-value ${safeAnimal.microchip ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.microchip ? 'Yes' : 'No'}
              </span>
            </div>
            <div class="cs-medical-item">
              <span class="cs-label">Special Needs:</span>
              <span class={`cs-value ${safeAnimal.special_needs ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.special_needs ? 'Yes' : 'No'}
              </span>
            </div>
            {safeAnimal.medical_notes && (
              <div class="cs-medical-item">
                <span class="cs-label">Medical Notes:</span>
                <span class="cs-value">{safeAnimal.medical_notes}</span>
              </div>
            )}
          </div>
        </div>
        
        <!-- Compatibility -->
        <div class="cs-detail-card">
          <h2>Compatibility</h2>
          <div class="cs-compatibility-grid">
            <div class="cs-compatibility-item">
              <span class="cs-label">Good with Kids:</span>
              <span class={`cs-value ${safeAnimal.good_with_kids ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.good_with_kids ? 'Yes' : 'No'}
              </span>
            </div>
            <div class="cs-compatibility-item">
              <span class="cs-label">Good with Cats:</span>
              <span class={`cs-value ${safeAnimal.good_with_cats ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.good_with_cats ? 'Yes' : 'No'}
              </span>
            </div>
            <div class="cs-compatibility-item">
              <span class="cs-label">Good with Dogs:</span>
              <span class={`cs-value ${safeAnimal.good_with_dogs ? 'cs-yes' : 'cs-no'}`}>
                {safeAnimal.good_with_dogs ? 'Yes' : 'No'}
              </span>
            </div>
            {safeAnimal.energy_level && (
              <div class="cs-compatibility-item">
                <span class="cs-label">Energy Level:</span>
                <span class="cs-value">{safeAnimal.energy_level}</span>
              </div>
            )}
            {safeAnimal.house_trained && (
              <div class="cs-compatibility-item">
                <span class="cs-label">House Trained:</span>
                <span class={`cs-value ${safeAnimal.house_trained ? 'cs-yes' : 'cs-no'}`}>
                  {safeAnimal.house_trained ? 'Yes' : 'No'}
                </span>
              </div>
            )}
          </div>
        </div>

      </div>
    </div>
  </section>

  <!-- ============================================ -->
  <!--              Adoption Process                -->
  <!-- ============================================ -->
  
  <section id="adoption-process">
    <div class="cs-container">
      <h2 class="cs-section-title">Ready to Adopt {safeAnimal.name}?</h2>
      <div class="cs-process-steps">
        <div class="cs-step">
          <div class="cs-step-number">1</div>
          <h3>Submit Application</h3>
          <p>Fill out our adoption application to help us understand your lifestyle and preferences.</p>
        </div>
        <div class="cs-step">
          <div class="cs-step-number">2</div>
          <h3>Meet & Greet</h3>
          <p>Schedule a visit to meet {safeAnimal.name} and see if you're a perfect match.</p>
        </div>
        <div class="cs-step">
          <div class="cs-step-number">3</div>
          <h3>Home Check</h3>
          <p>We'll arrange a brief home visit to ensure a safe environment for {safeAnimal.name}.</p>
        </div>
        <div class="cs-step">
          <div class="cs-step-number">4</div>
          <h3>Finalize Adoption</h3>
          <p>Complete the adoption paperwork and welcome {safeAnimal.name} to their new home!</p>
        </div>
      </div>

      <div class="cs-adoption-cta">
        <a href="/applications" class="cs-button-solid">Start Adoption Process</a>
        <a href="/our-animals" class="cs-button-transparent">View Other Animals</a>
      </div>
    </div>
  </section>

  <CTA />
</BaseLayout>

<style lang="less">
  /* Animal Header */
  #animal-header {
    padding: var(--sectionPadding);

    .cs-container {
      max-width: 1200px;
      margin: 0 auto;
    }

    .cs-content {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
      align-items: start;
    }

    .cs-image-gallery {
      .cs-main-image {
        margin-bottom: 1rem;
        border-radius: 12px;
        overflow: hidden;

        img {
          width: 100%;
          height: 400px;
          object-fit: cover;
        }
      }

      .cs-thumbnail-gallery {
        display: flex;
        gap: 0.5rem;

        img {
          width: 80px;
          height: 80px;
          object-fit: cover;
          border-radius: 8px;
          cursor: pointer;
          opacity: 0.7;
          transition: opacity 0.3s ease;

          &.active,
          &:hover {
            opacity: 1;
          }
        }
      }
    }

    .cs-info {
      .cs-status-badge {
        display: inline-block;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.875rem;
        margin-bottom: 1rem;

        &.cs-status-available {
          background: #27ae60;
          color: white;
        }
      }

      .cs-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--headerColor);
      }

      .cs-basic-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 12px;
        border: 1px solid #e9ecef;
      }

      .cs-info-item {
        strong {
          color: #2c3e50;
          font-weight: 600;
        }

        span {
          color: #495057;
        }
      }

      .cs-description {
        font-size: 1.125rem;
        line-height: 1.6;
        margin-bottom: 2rem;
        color: var(--bodyTextColor);
      }

      .cs-action-buttons {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
      }
    }
  }

  /* Animal Details */
  #animal-details {
    padding: var(--sectionPadding);
    background: #f8f9fa;

    .cs-details-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    .cs-detail-card {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);

      h2 {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--headerColor);
        border-bottom: 2px solid var(--primary);
        padding-bottom: 0.5rem;
      }
    }

    .cs-story-card {
      grid-column: 1 / -1;

      .cs-story-text {
        font-size: 1.125rem;
        line-height: 1.6;
        margin-bottom: 1.5rem;
      }

      .cs-arrival-info {
        padding: 1rem;
        background: #e3f2fd;
        border-radius: 8px;
        font-size: 0.875rem;
        color: #1565c0;
        border-left: 4px solid var(--primary);
      }
    }

    .cs-personality-list {
      list-style: none;
      padding: 0;

      li {
        padding: 0.75rem;
        margin-bottom: 0.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid var(--primary);
        color: #495057;
      }
    }

    .cs-medical-info,
    .cs-compatibility-grid {
      .cs-medical-item,
      .cs-compatibility-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #eee;

        &:last-child {
          border-bottom: none;
        }
      }

      .cs-label {
        font-weight: 600;
        color: var(--headerColor);
      }

      .cs-value {
        &.cs-yes {
          color: #27ae60;
          font-weight: 600;
        }

        &.cs-no {
          color: #e74c3c;
          font-weight: 600;
        }
      }
    }
  }

  /* Adoption Process */
  #adoption-process {
    padding: var(--sectionPadding);
    text-align: center;

    .cs-section-title {
      font-size: 2.5rem;
      margin-bottom: 3rem;
      color: var(--headerColor);
    }

    .cs-process-steps {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-bottom: 3rem;
      max-width: 1000px;
      margin-left: auto;
      margin-right: auto;
    }

    .cs-step {
      padding: 2rem;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);

      .cs-step-number {
        width: 60px;
        height: 60px;
        background: var(--primary);
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0 auto 1rem;
      }

      h3 {
        font-size: 1.25rem;
        margin-bottom: 1rem;
        color: var(--headerColor);
      }

      p {
        line-height: 1.6;
        color: var(--bodyTextColor);
      }
    }

    .cs-adoption-cta {
      display: flex;
      gap: 1rem;
      justify-content: center;
      flex-wrap: wrap;
    }
  }

  .cs-adoption-cta .cs-button-solid,
  .cs-adoption-cta .cs-button-transparent {
    min-width: (200/16rem);
  }

  /* Mobile Responsive */
  @media only screen and (max-width: 768px) {
    #animal-header .cs-content {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .cs-info .cs-title {
      font-size: 2rem;
    }

    .cs-basic-info {
      grid-template-columns: 1fr;
    }

    .cs-action-buttons {
      flex-direction: column;
    }

    .cs-details-grid {
      grid-template-columns: 1fr;
    }

    .cs-process-steps {
      grid-template-columns: 1fr;
    }

    .cs-adoption-cta {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script>
  // Image gallery functionality
  document.addEventListener('DOMContentLoaded', function() {
    const thumbnails = document.querySelectorAll('.cs-thumbnail-gallery img');
    const mainImage = document.querySelector('.cs-main-image img') as HTMLImageElement;

    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', function() {
        // Remove active class from all thumbnails
        thumbnails.forEach(thumb => thumb.classList.remove('active'));
        // Add active class to clicked thumbnail
        this.classList.add('active');

        // Update main image
        const newSrc = this.getAttribute('data-main-src');
        if (newSrc && mainImage) {
          mainImage.src = newSrc;
        }
      });
    });
  });
</script>
