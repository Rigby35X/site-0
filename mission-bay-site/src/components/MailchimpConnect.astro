---
// Mailchimp Connect Component for Auth0 ‚Üí Paragon ‚Üí Mailchimp integration
---

<div id="mailchimp-connect" class="mailchimp-connect-container">
  <!-- Connection Status -->
  <div id="connection-status" class="connection-status">
    <div id="status-loading" class="status-loading">
      <span>üîÑ Checking connection status...</span>
    </div>
    
    <div id="status-not-authenticated" class="status-card error" style="display: none;">
      <h3>üîê Authentication Required</h3>
      <p>Please log in to connect your Mailchimp account.</p>
      <a href="/auth/login" class="auth-btn">Login</a>
    </div>

    <div id="status-no-paragon-user" class="status-card warning" style="display: none;">
      <h3>‚öôÔ∏è Setting up your account...</h3>
      <p>Creating your integration profile...</p>
      <button id="create-paragon-user-btn" class="connect-btn">
        Initialize Account
      </button>
    </div>
    
    <div id="status-disconnected" class="status-card" style="display: none;">
      <h3>üìß Connect Mailchimp</h3>
      <p>Connect your Mailchimp account to start managing your email campaigns and lists.</p>
      <button id="connect-mailchimp-btn" class="connect-btn">
        Connect Mailchimp Account
      </button>
    </div>

    <div id="status-connected" class="status-card connected" style="display: none;">
      <h3>‚úÖ Mailchimp Connected</h3>
      <p>Your Mailchimp account is connected and ready to use.</p>
      <div class="connection-actions">
        <button id="test-connection-btn" class="test-btn">
          Test Connection
        </button>
        <button id="disconnect-mailchimp-btn" class="disconnect-btn">
          Disconnect
        </button>
      </div>
    </div>

    <div id="status-error" class="status-card error" style="display: none;">
      <h3>‚ùå Connection Error</h3>
      <p id="error-message">Something went wrong. Please try again.</p>
      <button id="retry-connection-btn" class="retry-btn">
        Retry
      </button>
    </div>
  </div>

  <!-- Connection Details (shown when connected) -->
  <div id="connection-details" class="connection-details" style="display: none;">
    <h4>Connection Details</h4>
    <div id="connection-info" class="connection-info">
      <!-- Connection details will be populated here -->
    </div>
  </div>
</div>

<style>
  .mailchimp-connect-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .connection-status {
    margin-bottom: 2rem;
  }

  .status-loading {
    text-align: center;
    padding: 2rem;
    color: #6b7280;
  }

  .status-card {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    text-align: center;
  }

  .status-card.connected {
    border-color: #10b981;
    background: #f0fdf4;
  }

  .status-card.warning {
    border-color: #f59e0b;
    background: #fffbeb;
  }

  .status-card.error {
    border-color: #ef4444;
    background: #fef2f2;
  }

  .status-card h3 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .status-card p {
    margin: 0 0 1.5rem 0;
    color: #6b7280;
  }

  .connect-btn, .auth-btn {
    background: #059669;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-decoration: none;
    display: inline-block;
  }

  .connect-btn:hover, .auth-btn:hover {
    background: #047857;
  }

  .connection-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .test-btn {
    background: #2563eb;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .test-btn:hover {
    background: #1d4ed8;
  }

  .disconnect-btn {
    background: #dc2626;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .disconnect-btn:hover {
    background: #b91c1c;
  }

  .retry-btn {
    background: #6b7280;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .retry-btn:hover {
    background: #4b5563;
  }

  .connection-details {
    background: white;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }

  .connection-details h4 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .connection-info {
    display: grid;
    gap: 0.75rem;
  }

  .info-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: #f9fafb;
    border-radius: 0.25rem;
    font-size: 0.875rem;
  }

  .info-label {
    font-weight: 500;
    color: #374151;
  }

  .info-value {
    color: #6b7280;
  }
</style>

<script>
  // Mailchimp Connect Component Logic
  let paragonClient = null;
  let userToken = null;

  document.addEventListener('astro:page-load', () => {
    initializeMailchimpConnect();
  });

  async function initializeMailchimpConnect() {
    try {
      // Check if user is authenticated
      const authResponse = await fetch('/api/auth/me');
      const authData = await authResponse.json();
      
      if (!authData.user) {
        showStatus('not-authenticated');
        return;
      }

      // Try to get or create Paragon user
      await setupParagonUser();
      
      // Set up event listeners
      setupEventListeners();
      
    } catch (error) {
      console.error('Failed to initialize Mailchimp connect:', error);
      showError('Failed to initialize connection system');
    }
  }

  async function setupParagonUser() {
    try {
      // First try to get existing Paragon user
      let paragonResponse = await fetch('/api/paragon/create-user');
      
      if (!paragonResponse.ok && paragonResponse.status === 404) {
        // User doesn't exist, show create button
        showStatus('no-paragon-user');
        return;
      }
      
      if (!paragonResponse.ok) {
        throw new Error('Failed to check Paragon user');
      }
      
      const paragonData = await paragonResponse.json();
      userToken = paragonData.userToken;
      
      if (userToken) {
        // Initialize Paragon client with user token
        const { createParagonClient } = await import('/src/lib/paragon-client.js');
        paragonClient = createParagonClient(userToken);
        
        // Check Mailchimp connection status
        await checkMailchimpConnection();
      } else {
        showStatus('no-paragon-user');
      }
      
    } catch (error) {
      console.error('Error setting up Paragon user:', error);
      showError('Failed to set up integration account');
    }
  }

  async function createParagonUser() {
    try {
      showStatus('loading');
      
      const response = await fetch('/api/paragon/create-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to create Paragon user');
      }
      
      const data = await response.json();
      userToken = data.userToken;
      
      if (userToken) {
        const { createParagonClient } = await import('/src/lib/paragon-client.js');
        paragonClient = createParagonClient(userToken);
        await checkMailchimpConnection();
      } else {
        throw new Error('No user token received');
      }
      
    } catch (error) {
      console.error('Error creating Paragon user:', error);
      showError('Failed to create integration account');
    }
  }

  async function checkMailchimpConnection() {
    try {
      if (!paragonClient) {
        showStatus('disconnected');
        return;
      }
      
      // Check if Mailchimp is connected
      const integrations = await paragonClient.integrations.list();
      const mailchimpIntegration = integrations.find(integration => 
        integration.type === 'mailchimp' || integration.key === 'mailchimp'
      );
      
      if (mailchimpIntegration && mailchimpIntegration.connected) {
        showStatus('connected');
        showConnectionDetails(mailchimpIntegration);
      } else {
        showStatus('disconnected');
      }
      
    } catch (error) {
      console.error('Error checking Mailchimp connection:', error);
      showStatus('disconnected');
    }
  }

  async function connectMailchimp() {
    try {
      if (!paragonClient) {
        throw new Error('Paragon client not initialized');
      }
      
      // Open Mailchimp OAuth window
      await paragonClient.connections.connect('mailchimp');
      
      // Check connection status after a delay
      setTimeout(async () => {
        await checkMailchimpConnection();
      }, 2000);
      
    } catch (error) {
      console.error('Error connecting Mailchimp:', error);
      showError('Failed to connect Mailchimp account');
    }
  }

  async function disconnectMailchimp() {
    try {
      if (!paragonClient) {
        throw new Error('Paragon client not initialized');
      }
      
      if (confirm('Are you sure you want to disconnect your Mailchimp account?')) {
        await paragonClient.connections.disconnect('mailchimp');
        showStatus('disconnected');
        hideConnectionDetails();
      }
      
    } catch (error) {
      console.error('Error disconnecting Mailchimp:', error);
      showError('Failed to disconnect Mailchimp account');
    }
  }

  async function testConnection() {
    try {
      if (!paragonClient) {
        throw new Error('Paragon client not initialized');
      }
      
      // Test connection by trying to list Mailchimp lists
      const actions = await paragonClient.actions.list('mailchimp');
      const testAction = actions.find(action => action.key === 'get-lists');
      
      if (testAction) {
        const result = await paragonClient.actions.run('mailchimp', 'get-lists', {});
        alert('‚úÖ Connection test successful! Found ' + (result.data?.lists?.length || 0) + ' lists.');
      } else {
        alert('‚úÖ Connection is active, but no test action available.');
      }
      
    } catch (error) {
      console.error('Error testing connection:', error);
      alert('‚ùå Connection test failed: ' + error.message);
    }
  }

  function setupEventListeners() {
    // Create Paragon user button
    document.getElementById('create-paragon-user-btn')?.addEventListener('click', createParagonUser);
    
    // Connect button
    document.getElementById('connect-mailchimp-btn')?.addEventListener('click', connectMailchimp);
    
    // Disconnect button
    document.getElementById('disconnect-mailchimp-btn')?.addEventListener('click', disconnectMailchimp);
    
    // Test connection button
    document.getElementById('test-connection-btn')?.addEventListener('click', testConnection);
    
    // Retry button
    document.getElementById('retry-connection-btn')?.addEventListener('click', () => {
      initializeMailchimpConnect();
    });
  }

  function showStatus(status) {
    // Hide all status cards
    const statusCards = [
      'status-loading',
      'status-not-authenticated', 
      'status-no-paragon-user',
      'status-disconnected',
      'status-connected',
      'status-error'
    ];
    
    statusCards.forEach(cardId => {
      const element = document.getElementById(cardId);
      if (element) element.style.display = 'none';
    });
    
    // Show the requested status
    const targetElement = document.getElementById(`status-${status}`);
    if (targetElement) {
      targetElement.style.display = 'block';
    }
  }

  function showError(message) {
    const errorElement = document.getElementById('error-message');
    if (errorElement) {
      errorElement.textContent = message;
    }
    showStatus('error');
  }

  function showConnectionDetails(integration) {
    const detailsContainer = document.getElementById('connection-details');
    const infoContainer = document.getElementById('connection-info');
    
    if (detailsContainer && infoContainer) {
      infoContainer.innerHTML = `
        <div class="info-item">
          <span class="info-label">Status:</span>
          <span class="info-value">Connected</span>
        </div>
        <div class="info-item">
          <span class="info-label">Integration:</span>
          <span class="info-value">Mailchimp</span>
        </div>
        <div class="info-item">
          <span class="info-label">Connected:</span>
          <span class="info-value">${new Date().toLocaleDateString()}</span>
        </div>
      `;
      
      detailsContainer.style.display = 'block';
    }
  }

  function hideConnectionDetails() {
    const detailsContainer = document.getElementById('connection-details');
    if (detailsContainer) {
      detailsContainer.style.display = 'none';
    }
  }
</script>
