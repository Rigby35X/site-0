---
// Mailchimp Connect Component for Auth0 ‚Üí Paragon ‚Üí Mailchimp integration
---

<div id="mailchimp-connect" class="mailchimp-connect-container">
  <!-- Connection Status Display -->
  <div id="connection-status" class="connection-status">
    <div id="status-loading" class="status-item loading">
      <div class="status-icon">üîÑ</div>
      <div class="status-content">
        <h3>Checking Connection...</h3>
        <p>Please wait while we check your Mailchimp connection status.</p>
      </div>
    </div>

    <div id="status-disconnected" class="status-item disconnected" style="display: none;">
      <div class="status-icon">üìß</div>
      <div class="status-content">
        <h3>Connect Your Mailchimp Account</h3>
        <p>Connect your Mailchimp account to start managing email campaigns and subscriber lists.</p>
        <div class="status-actions">
          <button id="connect-btn" class="connect-button">
            üîó Connect Mailchimp
          </button>
        </div>
      </div>
    </div>

    <div id="status-connected" class="status-item connected" style="display: none;">
      <div class="status-icon">‚úÖ</div>
      <div class="status-content">
        <h3>Mailchimp Connected</h3>
        <p>Your Mailchimp account is successfully connected and ready to use.</p>
        <div class="status-actions">
          <button id="disconnect-btn" class="disconnect-button">
            üîå Disconnect
          </button>
          <button id="refresh-connection-btn" class="refresh-button">
            üîÑ Refresh
          </button>
        </div>
      </div>
    </div>

    <div id="status-error" class="status-item error" style="display: none;">
      <div class="status-icon">‚ùå</div>
      <div class="status-content">
        <h3>Connection Error</h3>
        <p id="error-message">There was an error with your Mailchimp connection.</p>
        <div class="status-actions">
          <button id="retry-btn" class="retry-button">
            üîÑ Try Again
          </button>
        </div>
      </div>
    </div>

    <div id="status-unauthenticated" class="status-item unauthenticated" style="display: none;">
      <div class="status-icon">üîê</div>
      <div class="status-content">
        <h3>Login Required</h3>
        <p>Please log in with your account to connect Mailchimp and manage your email campaigns.</p>
        <div class="status-actions">
          <a href="/api/auth/login" class="login-button">
            üîë Login to Continue
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- User Token Status -->
  <div id="user-token-status" class="user-token-status">
    <div id="token-loading" class="token-item loading">
      <span>üîë Initializing user session...</span>
    </div>
    
    <div id="token-ready" class="token-item ready" style="display: none;">
      <span>üîë User session ready</span>
    </div>
    
    <div id="token-error" class="token-item error" style="display: none;">
      <span>‚ùå User session error</span>
    </div>
  </div>
</div>

<style>
  .mailchimp-connect-container {
    max-width: 600px;
    margin: 0 auto;
  }

  .connection-status {
    background: white;
    border-radius: 0.5rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    overflow: hidden;
  }

  .status-item {
    display: flex;
    align-items: flex-start;
    gap: 1.5rem;
    padding: 2rem;
  }

  .status-item.loading {
    background: #f9fafb;
  }

  .status-item.disconnected {
    background: #fef3c7;
    border-left: 4px solid #f59e0b;
  }

  .status-item.connected {
    background: #f0fdf4;
    border-left: 4px solid #10b981;
  }

  .status-item.error {
    background: #fef2f2;
    border-left: 4px solid #ef4444;
  }

  .status-item.unauthenticated {
    background: #f0f9ff;
    border-left: 4px solid #3b82f6;
  }

  .status-icon {
    font-size: 2rem;
    flex-shrink: 0;
  }

  .status-content {
    flex: 1;
  }

  .status-content h3 {
    margin: 0 0 0.5rem 0;
    color: #1f2937;
    font-size: 1.25rem;
  }

  .status-content p {
    margin: 0 0 1.5rem 0;
    color: #6b7280;
    line-height: 1.6;
  }

  .status-actions {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .connect-button {
    background: #059669;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .connect-button:hover {
    background: #047857;
  }

  .disconnect-button {
    background: #dc2626;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .disconnect-button:hover {
    background: #b91c1c;
  }

  .refresh-button {
    background: #6b7280;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .refresh-button:hover {
    background: #4b5563;
  }

  .retry-button {
    background: #2563eb;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .retry-button:hover {
    background: #1d4ed8;
  }

  .login-button {
    background: #3b82f6;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    text-decoration: none;
    display: inline-block;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .login-button:hover {
    background: #2563eb;
  }

  .user-token-status {
    margin-top: 1rem;
    padding: 0.75rem 1rem;
    background: #f9fafb;
    border-radius: 0.375rem;
    border: 1px solid #e5e7eb;
  }

  .token-item {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .token-item.ready {
    color: #059669;
  }

  .token-item.error {
    color: #dc2626;
  }
</style>

<script>
  // Mailchimp Connect Component Logic
  document.addEventListener('astro:page-load', () => {
    initializeMailchimpConnect();
  });

  let paragonClient = null;
  let userToken = null;

  async function initializeMailchimpConnect() {
    try {
      await initializeUserSession();
      await checkMailchimpConnection();
      setupEventListeners();
    } catch (error) {
      console.error('Failed to initialize Mailchimp connect:', error);

      // Check if it's an authentication error
      if (error.message === 'Authentication required') {
        document.getElementById('status-loading').style.display = 'none';
        document.getElementById('status-unauthenticated').style.display = 'flex';
      } else {
        showError('Failed to initialize: ' + error.message);
      }
    }
  }

  async function initializeUserSession() {
    try {
      // Get Auth0 token to use as Paragon user token
      const response = await fetch('/api/auth/user-token');

      if (response.status === 401) {
        // User is not authenticated
        document.getElementById('token-loading').style.display = 'none';
        document.getElementById('token-error').style.display = 'block';
        throw new Error('Authentication required');
      }

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

      const data = await response.json();
      if (data.error) throw new Error(data.error);

      userToken = data.userToken; // This is the Auth0 token

      const { createParagonClient } = await import('/src/lib/paragon-client.js');
      paragonClient = createParagonClient(userToken);

      document.getElementById('token-loading').style.display = 'none';
      document.getElementById('token-ready').style.display = 'block';

    } catch (error) {
      document.getElementById('token-loading').style.display = 'none';
      document.getElementById('token-error').style.display = 'block';
      throw error;
    }
  }

  async function checkMailchimpConnection() {
    try {
      if (!paragonClient) throw new Error('Paragon client not initialized');

      const integrations = await paragonClient.integrations.list();
      const mailchimpIntegration = integrations.find(integration => 
        integration.type === 'mailchimp' || integration.key === 'mailchimp'
      );

      document.getElementById('status-loading').style.display = 'none';
      
      if (mailchimpIntegration && mailchimpIntegration.connected) {
        document.getElementById('status-connected').style.display = 'flex';
      } else {
        document.getElementById('status-disconnected').style.display = 'flex';
      }
      
    } catch (error) {
      console.error('Error checking connection:', error);
      document.getElementById('status-loading').style.display = 'none';
      showError('Failed to check connection: ' + error.message);
    }
  }

  function showError(message) {
    document.getElementById('status-error').style.display = 'flex';
    document.getElementById('error-message').textContent = message;
  }

  function setupEventListeners() {
    document.getElementById('connect-btn')?.addEventListener('click', connectMailchimp);
    document.getElementById('disconnect-btn')?.addEventListener('click', disconnectMailchimp);
    document.getElementById('refresh-connection-btn')?.addEventListener('click', refreshConnection);
    document.getElementById('retry-btn')?.addEventListener('click', retryConnection);
  }

  async function connectMailchimp() {
    try {
      if (!paragonClient) throw new Error('Paragon client not initialized');
      await paragonClient.connections.connect('mailchimp');
      setTimeout(refreshConnection, 2000);
    } catch (error) {
      console.error('Error connecting:', error);
      showError('Failed to connect: ' + error.message);
    }
  }

  async function disconnectMailchimp() {
    try {
      if (!paragonClient) throw new Error('Paragon client not initialized');
      if (confirm('Disconnect Mailchimp?')) {
        await paragonClient.connections.disconnect('mailchimp');
        hideAllStatusItems();
        document.getElementById('status-disconnected').style.display = 'flex';
      }
    } catch (error) {
      console.error('Error disconnecting:', error);
      showError('Failed to disconnect: ' + error.message);
    }
  }

  async function refreshConnection() {
    hideAllStatusItems();
    document.getElementById('status-loading').style.display = 'flex';
    await checkMailchimpConnection();
  }

  async function retryConnection() {
    hideAllStatusItems();
    document.getElementById('status-loading').style.display = 'flex';
    await initializeMailchimpConnect();
  }

  function hideAllStatusItems() {
    document.getElementById('status-loading').style.display = 'none';
    document.getElementById('status-disconnected').style.display = 'none';
    document.getElementById('status-connected').style.display = 'none';
    document.getElementById('status-error').style.display = 'none';
    document.getElementById('status-unauthenticated').style.display = 'none';
  }
</script>
