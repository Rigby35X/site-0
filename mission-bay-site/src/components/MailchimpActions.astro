---
// Mailchimp Actions Component for Barkhaus Multi-Tenant Setup
---

<div id="mailchimp-actions" class="mailchimp-container">
  <!-- Connection Status -->
  <div id="connection-status" class="connection-status">
    <div id="connection-loading" class="status-loading">
      <span>ðŸ”„ Checking Mailchimp connection...</span>
    </div>
    
    <div id="connection-disconnected" class="status-disconnected" style="display: none;">
      <div class="status-card">
        <h3>ðŸ“§ Connect Mailchimp</h3>
        <p>Connect your Mailchimp account to start managing your email campaigns and lists.</p>
        <button id="connect-mailchimp-btn" class="connect-btn">
          Connect Mailchimp Account
        </button>
      </div>
    </div>

    <div id="connection-connected" class="status-connected" style="display: none;">
      <div class="status-card connected">
        <h3>âœ… Mailchimp Connected</h3>
        <p>Your Mailchimp account is connected and ready to use.</p>
        <button id="disconnect-mailchimp-btn" class="disconnect-btn">
          Disconnect
        </button>
      </div>
    </div>
  </div>

  <!-- Mailchimp Actions Interface -->
  <div id="mailchimp-interface" class="mailchimp-interface" style="display: none;">
    <div class="interface-header">
      <h2>ðŸ“§ Mailchimp Actions</h2>
      <p>Manage your email campaigns, lists, and subscribers</p>
    </div>

    <!-- Action Selector -->
    <div class="action-selector">
      <label for="action-select">Select Action:</label>
      <select id="action-select" class="action-select">
        <option value="">Loading actions...</option>
      </select>
    </div>

    <!-- Parameters Form -->
    <div id="parameters-form" class="parameters-form" style="display: none;">
      <h3>Parameters</h3>
      <div id="parameters-container" class="parameters-container">
        <!-- Dynamic parameters will be inserted here -->
      </div>
      
      <div class="form-actions">
        <button id="run-action-btn" class="run-btn" disabled>
          <span id="run-btn-text">Run Action</span>
          <span id="run-btn-loading" style="display: none;">ðŸ”„ Running...</span>
        </button>
        <button id="clear-form-btn" class="clear-btn">Clear</button>
      </div>
    </div>

    <!-- Results Display -->
    <div id="results-container" class="results-container" style="display: none;">
      <h3>Results</h3>
      <div class="results-tabs">
        <button class="tab-btn active" data-tab="formatted">Formatted</button>
        <button class="tab-btn" data-tab="raw">Raw JSON</button>
      </div>
      
      <div id="results-formatted" class="results-content active">
        <div id="results-formatted-content"></div>
      </div>
      
      <div id="results-raw" class="results-content">
        <pre id="results-raw-content"></pre>
      </div>
      
      <button id="clear-results-btn" class="clear-results-btn">Clear Results</button>
    </div>
  </div>
</div>

<style>
  .mailchimp-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 1rem;
  }

  .connection-status {
    margin-bottom: 2rem;
  }

  .status-loading {
    text-align: center;
    padding: 2rem;
    color: #6b7280;
  }

  .status-card {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    text-align: center;
  }

  .status-card.connected {
    border-color: #10b981;
    background: #f0fdf4;
  }

  .status-card h3 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .status-card p {
    margin: 0 0 1.5rem 0;
    color: #6b7280;
  }

  .connect-btn {
    background: #059669;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .connect-btn:hover {
    background: #047857;
  }

  .disconnect-btn {
    background: #dc2626;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .disconnect-btn:hover {
    background: #b91c1c;
  }

  .mailchimp-interface {
    background: white;
    border-radius: 0.5rem;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }

  .interface-header {
    margin-bottom: 2rem;
    text-align: center;
  }

  .interface-header h2 {
    margin: 0 0 0.5rem 0;
    color: #1f2937;
  }

  .interface-header p {
    margin: 0;
    color: #6b7280;
  }

  .action-selector {
    margin-bottom: 2rem;
  }

  .action-selector label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #374151;
  }

  .action-select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    background: white;
    font-size: 1rem;
  }

  .parameters-form {
    margin-bottom: 2rem;
  }

  .parameters-form h3 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .parameters-container {
    display: grid;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .parameter-field {
    display: grid;
    gap: 0.5rem;
  }

  .parameter-field label {
    font-weight: 500;
    color: #374151;
    font-size: 0.875rem;
  }

  .parameter-field input,
  .parameter-field textarea {
    padding: 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    font-size: 0.875rem;
  }

  .parameter-field textarea {
    min-height: 80px;
    resize: vertical;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .run-btn {
    background: #2563eb;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .run-btn:hover:not(:disabled) {
    background: #1d4ed8;
  }

  .run-btn:disabled {
    background: #9ca3af;
    cursor: not-allowed;
  }

  .clear-btn {
    background: #6b7280;
    color: white;
    border: none;
    padding: 0.75rem 1rem;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .clear-btn:hover {
    background: #4b5563;
  }

  .results-container {
    border-top: 1px solid #e5e7eb;
    padding-top: 2rem;
  }

  .results-container h3 {
    margin: 0 0 1rem 0;
    color: #1f2937;
  }

  .results-tabs {
    display: flex;
    gap: 0.25rem;
    margin-bottom: 1rem;
  }

  .tab-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #d1d5db;
    background: #f9fafb;
    cursor: pointer;
    border-radius: 0.375rem 0.375rem 0 0;
    font-size: 0.875rem;
  }

  .tab-btn.active {
    background: white;
    border-bottom-color: white;
    font-weight: 500;
  }

  .results-content {
    display: none;
    border: 1px solid #d1d5db;
    border-radius: 0 0.375rem 0.375rem 0.375rem;
    padding: 1rem;
    background: white;
    min-height: 200px;
  }

  .results-content.active {
    display: block;
  }

  .results-content pre {
    margin: 0;
    font-size: 0.875rem;
    color: #374151;
    white-space: pre-wrap;
    word-break: break-word;
  }

  .clear-results-btn {
    margin-top: 1rem;
    background: #6b7280;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    cursor: pointer;
  }

  .clear-results-btn:hover {
    background: #4b5563;
  }
</style>

<script>
  // Mailchimp Actions Component Logic
  document.addEventListener('astro:page-load', () => {
    initializeMailchimpActions();
  });

  async function initializeMailchimpActions() {
    try {
      // Import Paragon client
      const { paragon, isMailchimpConnected, getMailchimpActions, executeMailchimpAction } = await import('/src/lib/paragon-client.js');
      
      // Check connection status
      await checkConnectionStatus();
      
      // Set up event listeners
      setupEventListeners();
      
    } catch (error) {
      console.error('Failed to initialize Mailchimp actions:', error);
      showError('Failed to initialize Mailchimp integration');
    }
  }

  async function checkConnectionStatus() {
    try {
      const { isMailchimpConnected } = await import('/src/lib/paragon-client.js');
      const connected = await isMailchimpConnected();
      
      document.getElementById('connection-loading').style.display = 'none';
      
      if (connected) {
        document.getElementById('connection-connected').style.display = 'block';
        document.getElementById('mailchimp-interface').style.display = 'block';
        await loadMailchimpActions();
      } else {
        document.getElementById('connection-disconnected').style.display = 'block';
      }
    } catch (error) {
      console.error('Error checking connection:', error);
      document.getElementById('connection-loading').style.display = 'none';
      document.getElementById('connection-disconnected').style.display = 'block';
    }
  }

  async function loadMailchimpActions() {
    try {
      const { getMailchimpActions } = await import('/src/lib/paragon-client.js');
      const actions = await getMailchimpActions();
      
      const select = document.getElementById('action-select');
      select.innerHTML = '<option value="">Select a Mailchimp Action</option>';
      
      actions.forEach(action => {
        const option = document.createElement('option');
        option.value = action.key;
        option.textContent = action.name || action.key;
        option.dataset.action = JSON.stringify(action);
        select.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading actions:', error);
      showError('Failed to load Mailchimp actions');
    }
  }

  function setupEventListeners() {
    // Connect button
    document.getElementById('connect-mailchimp-btn')?.addEventListener('click', connectMailchimp);
    
    // Disconnect button
    document.getElementById('disconnect-mailchimp-btn')?.addEventListener('click', disconnectMailchimp);
    
    // Action selector
    document.getElementById('action-select')?.addEventListener('change', handleActionSelect);
    
    // Run action button
    document.getElementById('run-action-btn')?.addEventListener('click', runAction);
    
    // Clear form button
    document.getElementById('clear-form-btn')?.addEventListener('click', clearForm);
    
    // Clear results button
    document.getElementById('clear-results-btn')?.addEventListener('click', clearResults);
    
    // Tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', (e) => switchTab(e.target.dataset.tab));
    });
  }

  async function connectMailchimp() {
    try {
      // In a real implementation, you'd get the user ID from your auth system
      const userId = 'user-' + Date.now(); // Temporary user ID
      
      const { getMailchimpConnectionUrl } = await import('/src/lib/paragon-client.js');
      const connectionUrl = getMailchimpConnectionUrl(userId);
      
      // Open connection URL in new window
      window.open(connectionUrl, 'mailchimp-connect', 'width=600,height=700');
      
      // Listen for connection completion (you'd implement this based on your callback handling)
      // For now, just show a message
      alert('Please complete the Mailchimp connection in the popup window.');
      
    } catch (error) {
      console.error('Error connecting Mailchimp:', error);
      showError('Failed to connect Mailchimp');
    }
  }

  function disconnectMailchimp() {
    // Implement disconnect logic
    if (confirm('Are you sure you want to disconnect Mailchimp?')) {
      // Reset UI to disconnected state
      document.getElementById('connection-connected').style.display = 'none';
      document.getElementById('connection-disconnected').style.display = 'block';
      document.getElementById('mailchimp-interface').style.display = 'none';
    }
  }

  function handleActionSelect(e) {
    const selectedOption = e.target.selectedOptions[0];
    const parametersForm = document.getElementById('parameters-form');
    const parametersContainer = document.getElementById('parameters-container');
    
    if (!selectedOption.value) {
      parametersForm.style.display = 'none';
      return;
    }
    
    try {
      const action = JSON.parse(selectedOption.dataset.action);
      
      // Clear previous parameters
      parametersContainer.innerHTML = '';
      
      // Create parameter fields
      if (action.fields && action.fields.length > 0) {
        action.fields.forEach(field => {
          const fieldDiv = document.createElement('div');
          fieldDiv.className = 'parameter-field';
          
          const label = document.createElement('label');
          label.textContent = field.label || field.key;
          label.setAttribute('for', `param-${field.key}`);
          
          const input = document.createElement(field.type === 'textarea' ? 'textarea' : 'input');
          input.id = `param-${field.key}`;
          input.name = field.key;
          input.placeholder = field.placeholder || '';
          
          if (field.type !== 'textarea') {
            input.type = field.type || 'text';
          }
          
          fieldDiv.appendChild(label);
          fieldDiv.appendChild(input);
          parametersContainer.appendChild(fieldDiv);
        });
      } else {
        parametersContainer.innerHTML = '<p>No parameters required for this action.</p>';
      }
      
      parametersForm.style.display = 'block';
      document.getElementById('run-action-btn').disabled = false;
      
    } catch (error) {
      console.error('Error parsing action data:', error);
      showError('Failed to load action parameters');
    }
  }

  async function runAction() {
    const actionSelect = document.getElementById('action-select');
    const selectedAction = actionSelect.value;
    
    if (!selectedAction) return;
    
    // Collect parameters
    const params = {};
    const paramInputs = document.querySelectorAll('#parameters-container input, #parameters-container textarea');
    paramInputs.forEach(input => {
      if (input.value.trim()) {
        params[input.name] = input.value.trim();
      }
    });
    
    // Show loading state
    document.getElementById('run-btn-text').style.display = 'none';
    document.getElementById('run-btn-loading').style.display = 'inline';
    document.getElementById('run-action-btn').disabled = true;
    
    try {
      const { executeMailchimpAction } = await import('/src/lib/paragon-client.js');
      const result = await executeMailchimpAction(selectedAction, params);
      
      displayResults(result);
      
    } catch (error) {
      console.error('Error running action:', error);
      displayResults({ error: error.message });
    } finally {
      // Reset button state
      document.getElementById('run-btn-text').style.display = 'inline';
      document.getElementById('run-btn-loading').style.display = 'none';
      document.getElementById('run-action-btn').disabled = false;
    }
  }

  function displayResults(result) {
    const resultsContainer = document.getElementById('results-container');
    const formattedContent = document.getElementById('results-formatted-content');
    const rawContent = document.getElementById('results-raw-content');
    
    // Display formatted results
    if (result.error) {
      formattedContent.innerHTML = `<div style="color: #dc2626; padding: 1rem; background: #fef2f2; border-radius: 0.375rem;">
        <strong>Error:</strong> ${result.error}
      </div>`;
    } else {
      formattedContent.innerHTML = `<div style="color: #059669; padding: 1rem; background: #f0fdf4; border-radius: 0.375rem;">
        <strong>Success!</strong> Action completed successfully.
        ${result.data ? `<br><br><strong>Data:</strong> ${JSON.stringify(result.data, null, 2)}` : ''}
      </div>`;
    }
    
    // Display raw JSON
    rawContent.textContent = JSON.stringify(result, null, 2);
    
    resultsContainer.style.display = 'block';
  }

  function clearForm() {
    document.getElementById('action-select').value = '';
    document.getElementById('parameters-form').style.display = 'none';
    clearResults();
  }

  function clearResults() {
    document.getElementById('results-container').style.display = 'none';
  }

  function switchTab(tabName) {
    // Update tab buttons
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.tab === tabName);
    });
    
    // Update tab content
    document.querySelectorAll('.results-content').forEach(content => {
      content.classList.toggle('active', content.id === `results-${tabName}`);
    });
  }

  function showError(message) {
    console.error(message);
    // You could implement a toast notification system here
    alert(message);
  }
</script>
