---
// Test page for multi-user Ayrshare integration
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multi-User Social Media Test - Barkhaus</title>
  <style>
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f8fafc;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }
    h1 {
      color: #04736b;
      margin-bottom: 30px;
    }
    .section {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
    }
    .section h2 {
      color: #132f2d;
      margin-top: 0;
    }
    button {
      background: #04736b;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin: 5px;
    }
    button:hover {
      background: #132f2d;
    }
    button:disabled {
      background: #94a3b8;
      cursor: not-allowed;
    }
    input, textarea, select {
      width: 100%;
      padding: 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      font-family: inherit;
      margin: 5px 0;
      box-sizing: border-box;
    }
    textarea {
      min-height: 100px;
      resize: vertical;
    }
    .result {
      background: #f1f5f9;
      padding: 15px;
      border-radius: 6px;
      margin-top: 15px;
      white-space: pre-wrap;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
    }
    .success {
      background: #dcfce7;
      border-left: 4px solid #16a34a;
    }
    .error {
      background: #fef2f2;
      border-left: 4px solid #dc2626;
    }
    .user-selector {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    .user-card {
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      padding: 16px;
      cursor: pointer;
      transition: all 0.2s;
      min-width: 200px;
    }
    .user-card.active {
      border-color: #04736b;
      background: #f0fdfa;
    }
    .user-card:hover {
      border-color: #6a9c9b;
    }
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 8px;
    }
    .status-connected {
      background: #16a34a;
    }
    .status-disconnected {
      background: #dc2626;
    }
    .status-unknown {
      background: #64748b;
    }
    .platform-selector {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin: 10px 0;
    }
    .platform-checkbox {
      display: flex;
      align-items: center;
      gap: 5px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üöÄ Multi-User Social Media Test - Barkhaus</h1>
    
    <!-- User Selection -->
    <div class="section">
      <h2>üë• Select Test User</h2>
      <div class="user-selector" id="userSelector">
        <!-- Users will be populated by JavaScript -->
      </div>
      <button onclick="addTestUser()">‚ûï Add Test User</button>
    </div>

    <!-- Profile Management -->
    <div class="section">
      <h2>üë§ Profile Management</h2>
      <div id="profileStatus">
        <p>Select a user to see their profile status</p>
      </div>
      <div id="profileActions" style="display: none;">
        <button onclick="createProfile()">‚ûï Create Profile</button>
        <button onclick="linkSocialAccounts()">üîó Link Social Accounts</button>
        <button onclick="refreshProfileStatus()">üîÑ Refresh Status</button>
      </div>
      <div id="profileResult" class="result" style="display: none;"></div>
    </div>

    <!-- Multi-User Posting -->
    <div class="section">
      <h2>üì± Multi-User Post Publishing</h2>
      <textarea id="postText" placeholder="Enter your post content here...">üöÄ Testing multi-user posting with Barkhaus! Each user can now connect their own social accounts. #Barkhaus #MultiUser #SocialMedia</textarea>
      
      <div class="platform-selector">
        <label class="platform-checkbox">
          <input type="checkbox" value="twitter" checked> Twitter/X
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="instagram" checked> Instagram
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="linkedin" checked> LinkedIn
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="facebook"> Facebook
        </label>
      </div>
      
      <input type="url" id="mediaUrl" placeholder="Media URL (optional)" value="https://example.com/barkhaus-multiuser-image.jpg">
      <input type="datetime-local" id="scheduleDate" placeholder="Schedule Date (optional)">
      
      <br>
      <button onclick="publishPost()">üì§ Publish Post</button>
      <div id="publishResult" class="result" style="display: none;"></div>
    </div>

    <!-- Analytics -->
    <div class="section">
      <h2>üìä User-Specific Analytics</h2>
      <input type="text" id="analyticsPostId" placeholder="Enter Post ID">
      <button onclick="getAnalytics()">üìà Get Analytics</button>
      <div id="analyticsResult" class="result" style="display: none;"></div>
    </div>
  </div>

  <script>
    // Test users
    let testUsers = [
      { id: 'user1', name: 'Sarah (Rescue Manager)', email: 'sarah@happypaws.org', profileKey: null, connected: [] },
      { id: 'user2', name: 'Mike (Volunteer Coordinator)', email: 'mike@happypaws.org', profileKey: null, connected: [] },
      { id: 'user3', name: 'Emma (Social Media Manager)', email: 'emma@happypaws.org', profileKey: null, connected: [] }
    ];

    let currentUser = null;

    // Initialize the page
    window.addEventListener('load', () => {
      renderUsers();
      loadUserStatuses();
    });

    // Render user selector
    function renderUsers() {
      const container = document.getElementById('userSelector');
      container.innerHTML = testUsers.map(user => `
        <div class="user-card ${currentUser?.id === user.id ? 'active' : ''}" onclick="selectUser('${user.id}')">
          <div>
            <span class="status-indicator ${getStatusClass(user)}"></span>
            <strong>${user.name}</strong>
          </div>
          <div style="font-size: 12px; color: #64748b; margin-top: 4px;">
            ${user.email}
          </div>
          <div style="font-size: 12px; margin-top: 4px;">
            ${user.connected.length > 0 ? `Connected: ${user.connected.join(', ')}` : 'No connections'}
          </div>
        </div>
      `).join('');
    }

    // Get status class for user
    function getStatusClass(user) {
      if (user.connected.length > 0) return 'status-connected';
      if (user.profileKey) return 'status-disconnected';
      return 'status-unknown';
    }

    // Select a user
    function selectUser(userId) {
      currentUser = testUsers.find(u => u.id === userId);
      renderUsers();
      updateProfileStatus();
      document.getElementById('profileActions').style.display = 'block';
    }

    // Add a test user
    function addTestUser() {
      const name = prompt('Enter user name:');
      const email = prompt('Enter user email:');
      if (name && email) {
        const newUser = {
          id: `user${Date.now()}`,
          name,
          email,
          profileKey: null,
          connected: []
        };
        testUsers.push(newUser);
        renderUsers();
      }
    }

    // Load user statuses
    async function loadUserStatuses() {
      for (const user of testUsers) {
        try {
          const response = await fetch(`/api/social/link?userId=${encodeURIComponent(user.id)}`);
          const result = await response.json();
          
          if (result.success && result.data) {
            user.profileKey = result.data.profileKey;
            user.connected = result.data.connectedNetworks || [];
          }
        } catch (error) {
          console.error(`Error loading status for ${user.name}:`, error);
        }
      }
      renderUsers();
      if (currentUser) {
        updateProfileStatus();
      }
    }

    // Update profile status display
    function updateProfileStatus() {
      if (!currentUser) return;

      const statusDiv = document.getElementById('profileStatus');
      const hasProfile = !!currentUser.profileKey;
      const connectedCount = currentUser.connected.length;

      statusDiv.innerHTML = `
        <h4>üìä ${currentUser.name} - Profile Status</h4>
        <p><strong>Profile:</strong> ${hasProfile ? '‚úÖ Created' : '‚ùå Not Created'}</p>
        <p><strong>Profile Key:</strong> ${currentUser.profileKey || 'None'}</p>
        <p><strong>Connected Networks:</strong> ${connectedCount > 0 ? currentUser.connected.join(', ') : 'None'}</p>
        <p><strong>Status:</strong> ${connectedCount > 0 ? 'üü¢ Ready to post' : 'üî¥ Needs setup'}</p>
      `;
    }

    // Create profile for current user
    async function createProfile() {
      if (!currentUser) {
        showResult('profileResult', { error: 'No user selected' }, true);
        return;
      }

      try {
        const response = await fetch('/api/social/profile', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: currentUser.id,
            title: `${currentUser.name} - Barkhaus Profile`
          })
        });

        const result = await response.json();
        showResult('profileResult', result, !result.success);

        if (result.success) {
          currentUser.profileKey = result.data.profileKey;
          updateProfileStatus();
          renderUsers();
        }
      } catch (error) {
        showResult('profileResult', { error: error.message }, true);
      }
    }

    // Link social accounts for current user
    async function linkSocialAccounts() {
      if (!currentUser) {
        showResult('profileResult', { error: 'No user selected' }, true);
        return;
      }

      try {
        const response = await fetch('/api/social/link', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: currentUser.id,
            redirectUrl: `${window.location.origin}/admin/social-linked`
          })
        });

        const result = await response.json();

        if (result.success) {
          // Open linking URL
          const linkingWindow = window.open(
            result.data.linkingUrl,
            'social-linking',
            'width=600,height=700,scrollbars=yes,resizable=yes'
          );

          // Monitor for completion
          const checkClosed = setInterval(() => {
            if (linkingWindow.closed) {
              clearInterval(checkClosed);
              setTimeout(() => {
                refreshProfileStatus();
              }, 2000);
            }
          }, 1000);

          showResult('profileResult', { message: 'Linking window opened. Complete the process and this will refresh automatically.' }, false);
        } else {
          showResult('profileResult', result, true);
        }
      } catch (error) {
        showResult('profileResult', { error: error.message }, true);
      }
    }

    // Refresh profile status
    async function refreshProfileStatus() {
      if (!currentUser) return;

      try {
        const response = await fetch(`/api/social/link?userId=${encodeURIComponent(currentUser.id)}`);
        const result = await response.json();
        
        if (result.success && result.data) {
          currentUser.profileKey = result.data.profileKey;
          currentUser.connected = result.data.connectedNetworks || [];
          updateProfileStatus();
          renderUsers();
          showResult('profileResult', { message: 'Profile status refreshed', data: result.data }, false);
        }
      } catch (error) {
        showResult('profileResult', { error: error.message }, true);
      }
    }

    // Publish post with current user's profile
    async function publishPost() {
      if (!currentUser) {
        showResult('publishResult', { error: 'No user selected' }, true);
        return;
      }

      if (!currentUser.profileKey) {
        showResult('publishResult', { error: 'User needs to create a profile first' }, true);
        return;
      }

      const postText = document.getElementById('postText').value;
      const platforms = getSelectedPlatforms();
      const mediaUrl = document.getElementById('mediaUrl').value;
      const scheduleDate = document.getElementById('scheduleDate').value;

      if (!postText.trim()) {
        showResult('publishResult', { error: 'Post text is required' }, true);
        return;
      }

      if (platforms.length === 0) {
        showResult('publishResult', { error: 'At least one platform must be selected' }, true);
        return;
      }

      const payload = {
        post: postText,
        platforms: platforms,
        mediaUrls: mediaUrl ? [mediaUrl] : [],
        scheduleDate: scheduleDate ? new Date(scheduleDate).toISOString() : undefined,
        profileKey: currentUser.profileKey
      };

      try {
        const response = await fetch('/api/social/post', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();
        showResult('publishResult', { 
          user: currentUser.name,
          profileKey: currentUser.profileKey,
          ...result 
        }, !result.success);
      } catch (error) {
        showResult('publishResult', { error: error.message }, true);
      }
    }

    // Get analytics with user's profile
    async function getAnalytics() {
      if (!currentUser) {
        showResult('analyticsResult', { error: 'No user selected' }, true);
        return;
      }

      const postId = document.getElementById('analyticsPostId').value;

      if (!postId.trim()) {
        showResult('analyticsResult', { error: 'Post ID is required' }, true);
        return;
      }

      try {
        const url = `/api/social/analytics?postId=${encodeURIComponent(postId)}${currentUser.profileKey ? `&profileKey=${currentUser.profileKey}` : ''}`;
        const response = await fetch(url);
        const result = await response.json();
        showResult('analyticsResult', {
          user: currentUser.name,
          profileKey: currentUser.profileKey,
          ...result
        }, !result.success);
      } catch (error) {
        showResult('analyticsResult', { error: error.message }, true);
      }
    }

    // Utility functions
    function showResult(elementId, data, isError = false) {
      const element = document.getElementById(elementId);
      element.style.display = 'block';
      element.className = `result ${isError ? 'error' : 'success'}`;
      element.textContent = JSON.stringify(data, null, 2);
    }

    function getSelectedPlatforms() {
      const checkboxes = document.querySelectorAll('.platform-checkbox input:checked');
      return Array.from(checkboxes).map(cb => cb.value);
    }
  </script>
</body>
</html>
