---
// Test page for all admin APIs
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin APIs Test - Barkhaus</title>
  <style>
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background: #f8fafc;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }
    h1 {
      color: #04736b;
      margin-bottom: 30px;
    }
    .section {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
    }
    .section h2 {
      color: #132f2d;
      margin-top: 0;
    }
    button {
      background: #04736b;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin: 5px;
    }
    button:hover {
      background: #132f2d;
    }
    button:disabled {
      background: #94a3b8;
      cursor: not-allowed;
    }
    input, textarea, select {
      width: 100%;
      padding: 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      font-family: inherit;
      margin: 5px 0;
      box-sizing: border-box;
    }
    .result {
      background: #f1f5f9;
      padding: 15px;
      border-radius: 6px;
      margin-top: 15px;
      white-space: pre-wrap;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
    }
    .success {
      background: #dcfce7;
      border-left: 4px solid #16a34a;
    }
    .error {
      background: #fef2f2;
      border-left: 4px solid #dc2626;
    }
    .form-group {
      margin-bottom: 15px;
    }
    label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      color: #374151;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üß™ Admin APIs Test - Barkhaus</h1>
    
    <div class="grid">
      <!-- Animals API Test -->
      <div class="section">
        <h2>üêï Animals API</h2>
        <button onclick="testAnimalsAPI()">üì• Get Animals</button>
        <button onclick="testCreateAnimal()">‚ûï Create Test Animal</button>
        <div id="animalsResult" class="result" style="display: none;"></div>
      </div>

      <!-- Social Media Generator Test -->
      <div class="section">
        <h2>üì± Social Media Generator</h2>
        <div class="form-group">
          <label for="postType">Post Type:</label>
          <select id="postType">
            <option value="new_arrival">New Arrival</option>
            <option value="adoption_update">Adoption Update</option>
            <option value="fundraiser">Fundraiser</option>
            <option value="volunteer_need">Volunteer Need</option>
            <option value="success_story">Success Story</option>
            <option value="event">Event</option>
            <option value="general">General</option>
          </select>
        </div>
        <div class="form-group">
          <label for="platform">Platform:</label>
          <select id="platform">
            <option value="facebook">Facebook</option>
            <option value="instagram">Instagram</option>
            <option value="twitter">Twitter</option>
            <option value="linkedin">LinkedIn</option>
            <option value="tiktok">TikTok</option>
          </select>
        </div>
        <button onclick="testSocialGenerator()">üöÄ Generate Content</button>
        <div id="socialResult" class="result" style="display: none;"></div>
      </div>

      <!-- Organization API Test -->
      <div class="section">
        <h2>üè¢ Organization API</h2>
        <button onclick="testOrganizationAPI()">üì• Get Organization</button>
        <button onclick="testUpdateOrganization()">‚úèÔ∏è Update EIN</button>
        <div id="orgResult" class="result" style="display: none;"></div>
      </div>

      <!-- Client Data API Test -->
      <div class="section">
        <h2>üåê Client Data API</h2>
        <button onclick="testClientDataAPI()">üîÑ Get Client Data</button>
        <div id="clientResult" class="result" style="display: none;"></div>
      </div>
    </div>

    <!-- Overall Status -->
    <div class="section">
      <h2>üìä Overall API Status</h2>
      <button onclick="testAllAPIs()">üß™ Test All APIs</button>
      <div id="overallResult" class="result" style="display: none;"></div>
    </div>
  </div>

  <script>
    // Test Animals API
    async function testAnimalsAPI() {
      const resultDiv = document.getElementById('animalsResult');
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Testing Animals API...';
        
        const response = await fetch('/api/admin/animals?orgId=3');
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Animals API Working!\n\nFound ${result.length} animals:\n\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Animals API Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test Create Animal
    async function testCreateAnimal() {
      const resultDiv = document.getElementById('animalsResult');
      
      const testAnimal = {
        orgId: '3',
        name: 'Test Pup',
        species: 'Dog',
        breed: 'Test Breed',
        age: '2 years',
        gender: 'Female',
        size: 'Medium',
        description: 'A test animal created by the API test',
        image_url: 'https://images.unsplash.com/photo-1543466835-00a7907e9de1?w=400'
      };
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Creating test animal...';
        
        const response = await fetch('/api/admin/animals', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(testAnimal)
        });
        
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Animal Created Successfully!\n\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Create Animal Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test Social Media Generator
    async function testSocialGenerator() {
      const resultDiv = document.getElementById('socialResult');
      const postType = document.getElementById('postType').value;
      const platform = document.getElementById('platform').value;
      
      const requestData = {
        postType,
        platform,
        platformConfig: { type: 'post' },
        animalData: {
          name: 'Buddy',
          species: 'Dog',
          breed: 'Golden Retriever',
          age: '3 years',
          description: 'A friendly and energetic dog'
        },
        tone: 'friendly',
        orgName: 'Happy Paws Dog Rescue'
      };
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Generating social media content...';
        
        const response = await fetch('/api/admin/generate-social-content', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestData)
        });
        
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Content Generated Successfully!\n\nContent: ${result.content}\n\nHashtags: ${result.hashtags.join(', ')}\n\nImage Prompt: ${result.imagePrompt}\n\n${result.fallback ? '‚ö†Ô∏è Using fallback templates (OpenAI not configured)' : 'ü§ñ Generated with OpenAI'}\n\nFull Response:\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Content Generation Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test Organization API
    async function testOrganizationAPI() {
      const resultDiv = document.getElementById('orgResult');
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Testing Organization API...';
        
        const response = await fetch('/api/admin/organization?orgId=3');
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Organization API Working!\n\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Organization API Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test Update Organization
    async function testUpdateOrganization() {
      const resultDiv = document.getElementById('orgResult');
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Testing organization update...';
        
        const response = await fetch('/api/admin/organization', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            orgId: '3',
            ein: '99-9999999'
          })
        });
        
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Organization Updated Successfully!\n\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Organization Update Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test Client Data API
    async function testClientDataAPI() {
      const resultDiv = document.getElementById('clientResult');
      
      try {
        resultDiv.style.display = 'block';
        resultDiv.className = 'result';
        resultDiv.textContent = 'üîÑ Testing Client Data API...';
        
        const response = await fetch('/api/client-data?orgId=3');
        const result = await response.json();
        
        if (response.ok) {
          resultDiv.className = 'result success';
          resultDiv.textContent = `‚úÖ Client Data API Working!\n\nEIN: ${result.ein}\nName: ${result.name}\n\n${JSON.stringify(result, null, 2)}`;
        } else {
          resultDiv.className = 'result error';
          resultDiv.textContent = `‚ùå Client Data API Failed: ${JSON.stringify(result, null, 2)}`;
        }
      } catch (error) {
        resultDiv.className = 'result error';
        resultDiv.textContent = `‚ùå Network Error: ${error.message}`;
      }
    }

    // Test All APIs
    async function testAllAPIs() {
      const resultDiv = document.getElementById('overallResult');
      resultDiv.style.display = 'block';
      resultDiv.className = 'result';
      resultDiv.textContent = 'üîÑ Testing all APIs...\n\n';
      
      const tests = [
        { name: 'Animals API', test: () => fetch('/api/admin/animals?orgId=3') },
        { name: 'Organization API', test: () => fetch('/api/admin/organization?orgId=3') },
        { name: 'Client Data API', test: () => fetch('/api/client-data?orgId=3') },
        { 
          name: 'Social Generator API', 
          test: () => fetch('/api/admin/generate-social-content', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              postType: 'general',
              platform: 'facebook',
              orgName: 'Happy Paws Dog Rescue'
            })
          })
        }
      ];
      
      const results = [];
      
      for (const test of tests) {
        try {
          const response = await test.test();
          const data = await response.json();
          
          results.push({
            name: test.name,
            status: response.ok ? '‚úÖ PASS' : '‚ùå FAIL',
            details: response.ok ? 'Working correctly' : data.error || 'Unknown error'
          });
        } catch (error) {
          results.push({
            name: test.name,
            status: '‚ùå ERROR',
            details: error.message
          });
        }
      }
      
      const passCount = results.filter(r => r.status.includes('‚úÖ')).length;
      const totalCount = results.length;
      
      let summary = `üìä API Test Results: ${passCount}/${totalCount} APIs Working\n\n`;
      
      results.forEach(result => {
        summary += `${result.status} ${result.name}: ${result.details}\n`;
      });
      
      if (passCount === totalCount) {
        resultDiv.className = 'result success';
        summary += '\nüéâ All APIs are working correctly!';
      } else {
        resultDiv.className = 'result error';
        summary += '\n‚ö†Ô∏è Some APIs need attention.';
      }
      
      resultDiv.textContent = summary;
    }

    // Auto-run tests on page load
    window.addEventListener('load', () => {
      testAllAPIs();
    });
  </script>
</body>
</html>
