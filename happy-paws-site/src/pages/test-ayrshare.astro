---
// Test page for Ayrshare integration
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ayrshare Integration Test - Barkhaus</title>
  <style>
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background: #f8fafc;
    }
    .container {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }
    h1 {
      color: #04736b;
      margin-bottom: 30px;
    }
    .section {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
    }
    .section h2 {
      color: #132f2d;
      margin-top: 0;
    }
    button {
      background: #04736b;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      margin: 5px;
    }
    button:hover {
      background: #132f2d;
    }
    button:disabled {
      background: #94a3b8;
      cursor: not-allowed;
    }
    textarea {
      width: 100%;
      min-height: 100px;
      padding: 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      font-family: inherit;
      resize: vertical;
    }
    select, input {
      padding: 8px 12px;
      border: 1px solid #d1d5db;
      border-radius: 6px;
      margin: 5px;
    }
    .result {
      background: #f1f5f9;
      padding: 15px;
      border-radius: 6px;
      margin-top: 15px;
      white-space: pre-wrap;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 12px;
      max-height: 300px;
      overflow-y: auto;
    }
    .success {
      background: #dcfce7;
      border-left: 4px solid #16a34a;
    }
    .error {
      background: #fef2f2;
      border-left: 4px solid #dc2626;
    }
    .platform-selector {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin: 10px 0;
    }
    .platform-checkbox {
      display: flex;
      align-items: center;
      gap: 5px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üöÄ Ayrshare Integration Test - Barkhaus</h1>
    
    <!-- Post Publishing Section -->
    <div class="section">
      <h2>üì± Publish Social Media Post</h2>
      <textarea id="postText" placeholder="Enter your post content here...">üöÄ Check out our new Barkhaus launch! The future of animal rescue marketing automation is here. #Barkhaus #AnimalRescue #MarketingAutomation</textarea>
      
      <div class="platform-selector">
        <label class="platform-checkbox">
          <input type="checkbox" value="twitter" checked> Twitter/X
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="instagram" checked> Instagram
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="linkedin" checked> LinkedIn
        </label>
        <label class="platform-checkbox">
          <input type="checkbox" value="facebook"> Facebook
        </label>
      </div>
      
      <input type="url" id="mediaUrl" placeholder="Media URL (optional)" value="https://example.com/barkhaus-launch-image.jpg">
      <input type="datetime-local" id="scheduleDate" placeholder="Schedule Date (optional)">
      
      <br>
      <button onclick="publishPost()">Publish Post</button>
      <div id="publishResult" class="result" style="display: none;"></div>
    </div>

    <!-- Analytics Section -->
    <div class="section">
      <h2>üìä Get Post Analytics</h2>
      <input type="text" id="analyticsPostId" placeholder="Enter Post ID">
      <button onclick="getAnalytics()">Get Analytics</button>
      <div id="analyticsResult" class="result" style="display: none;"></div>
    </div>

    <!-- Comments Section -->
    <div class="section">
      <h2>üí¨ Add Comment</h2>
      <input type="text" id="commentPostId" placeholder="Post ID">
      <select id="commentPlatform">
        <option value="twitter">Twitter/X</option>
        <option value="instagram">Instagram</option>
        <option value="linkedin">LinkedIn</option>
        <option value="facebook">Facebook</option>
      </select>
      <textarea id="commentText" placeholder="Enter your comment...">Thanks for all the amazing feedback! We're excited to help more rescues save lives with better marketing tools! üêæ‚ù§Ô∏è</textarea>
      <button onclick="addComment()">Add Comment</button>
      <div id="commentResult" class="result" style="display: none;"></div>
    </div>

    <!-- Messages Section -->
    <div class="section">
      <h2>üì® Send Direct Message</h2>
      <select id="messagePlatform">
        <option value="twitter">Twitter/X</option>
        <option value="instagram">Instagram</option>
        <option value="linkedin">LinkedIn</option>
        <option value="facebook">Facebook</option>
      </select>
      <input type="text" id="messageRecipient" placeholder="Recipient username/ID">
      <textarea id="messageText" placeholder="Enter your message...">Hi! Thanks for your interest in Barkhaus. We'd love to help your rescue organization improve its marketing efforts!</textarea>
      <button onclick="sendMessage()">Send Message</button>
      <div id="messageResult" class="result" style="display: none;"></div>
    </div>

    <!-- Post History Section -->
    <div class="section">
      <h2>üìú Get Post History</h2>
      <select id="historyPlatform">
        <option value="">All Platforms</option>
        <option value="twitter">Twitter/X</option>
        <option value="instagram">Instagram</option>
        <option value="linkedin">LinkedIn</option>
        <option value="facebook">Facebook</option>
      </select>
      <input type="number" id="historyLimit" placeholder="Limit (optional)" value="10">
      <button onclick="getHistory()">Get History</button>
      <div id="historyResult" class="result" style="display: none;"></div>
    </div>
  </div>

  <script>
    // Utility functions
    function showResult(elementId, data, isError = false) {
      const element = document.getElementById(elementId);
      element.style.display = 'block';
      element.className = `result ${isError ? 'error' : 'success'}`;
      element.textContent = JSON.stringify(data, null, 2);
    }

    function getSelectedPlatforms() {
      const checkboxes = document.querySelectorAll('.platform-checkbox input:checked');
      return Array.from(checkboxes).map(cb => cb.value);
    }

    // API functions
    async function publishPost() {
      const postText = document.getElementById('postText').value;
      const platforms = getSelectedPlatforms();
      const mediaUrl = document.getElementById('mediaUrl').value;
      const scheduleDate = document.getElementById('scheduleDate').value;

      if (!postText.trim()) {
        showResult('publishResult', { error: 'Post text is required' }, true);
        return;
      }

      if (platforms.length === 0) {
        showResult('publishResult', { error: 'At least one platform must be selected' }, true);
        return;
      }

      const payload = {
        post: postText,
        platforms: platforms,
        mediaUrls: mediaUrl ? [mediaUrl] : [],
        scheduleDate: scheduleDate ? new Date(scheduleDate).toISOString() : undefined
      };

      try {
        const response = await fetch('/api/social/post', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();
        showResult('publishResult', result, !result.success);
      } catch (error) {
        showResult('publishResult', { error: error.message }, true);
      }
    }

    async function getAnalytics() {
      const postId = document.getElementById('analyticsPostId').value;

      if (!postId.trim()) {
        showResult('analyticsResult', { error: 'Post ID is required' }, true);
        return;
      }

      try {
        const response = await fetch(`/api/social/analytics?postId=${encodeURIComponent(postId)}`);
        const result = await response.json();
        showResult('analyticsResult', result, !result.success);
      } catch (error) {
        showResult('analyticsResult', { error: error.message }, true);
      }
    }

    async function addComment() {
      const postId = document.getElementById('commentPostId').value;
      const platform = document.getElementById('commentPlatform').value;
      const comment = document.getElementById('commentText').value;

      if (!postId.trim() || !comment.trim()) {
        showResult('commentResult', { error: 'Post ID and comment are required' }, true);
        return;
      }

      const payload = { postId, platform, comment };

      try {
        const response = await fetch('/api/social/comments', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();
        showResult('commentResult', result, !result.success);
      } catch (error) {
        showResult('commentResult', { error: error.message }, true);
      }
    }

    async function sendMessage() {
      const platform = document.getElementById('messagePlatform').value;
      const recipient = document.getElementById('messageRecipient').value;
      const message = document.getElementById('messageText').value;

      if (!recipient.trim() || !message.trim()) {
        showResult('messageResult', { error: 'Recipient and message are required' }, true);
        return;
      }

      const payload = { platform, recipient, message };

      try {
        const response = await fetch('/api/social/messages', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();
        showResult('messageResult', result, !result.success);
      } catch (error) {
        showResult('messageResult', { error: error.message }, true);
      }
    }

    async function getHistory() {
      const platform = document.getElementById('historyPlatform').value;
      const limit = document.getElementById('historyLimit').value;

      const params = new URLSearchParams({ action: 'history' });
      if (platform) params.append('platform', platform);
      if (limit) params.append('limit', limit);

      try {
        const response = await fetch(`/api/social/post?${params}`);
        const result = await response.json();
        showResult('historyResult', result, !result.success);
      } catch (error) {
        showResult('historyResult', { error: error.message }, true);
      }
    }
  </script>
</body>
</html>
