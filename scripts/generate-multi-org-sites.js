#!/usr/bin/env node

/**
 * Generate Multiple Organization Sites
 * 
 * This script creates separate front-end websites for each organization
 * by copying the template and configuring each with organization-specific data
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Organization configurations
const organizations = {
  3: {
    id: 3,
    name: "Happy Paws Dog Rescue",
    slug: "happy-paws",
    domain: "happypaws.local",
    port: 4330,
    colors: {
      primary: "#059669",
      secondary: "#6b7280"
    }
  },
  4: {
    id: 4,
    name: "Furry Friends Sanctuary",
    slug: "furry-friends",
    domain: "furryfriends.local",
    port: 4331,
    colors: {
      primary: "#7c3aed",
      secondary: "#a855f7"
    }
  },
  5: {
    id: 5,
    name: "Paws & Hearts Rescue",
    slug: "paws-hearts",
    domain: "pawshearts.local",
    port: 4332,
    colors: {
      primary: "#dc2626",
      secondary: "#ef4444"
    }
  },
  6: {
    id: 6,
    name: "Second Chance Animal Rescue",
    slug: "second-chance",
    domain: "secondchance.local",
    port: 4333,
    colors: {
      primary: "#0891b2",
      secondary: "#06b6d4"
    }
  },
  7: {
    id: 7,
    name: "Loving Tails Foundation",
    slug: "loving-tails",
    domain: "lovingtails.local",
    port: 4334,
    colors: {
      primary: "#ea580c",
      secondary: "#fb923c"
    }
  },
  9: {
    id: 9,
    name: "Rescue Rangers Network",
    slug: "rescue-rangers",
    domain: "rescuerangers.local",
    port: 4335,
    colors: {
      primary: "#16a34a",
      secondary: "#22c55e"
    }
  }
};

console.log('🚀 Generating organization-specific websites...');

// Paths
const templateDir = path.join(__dirname, '../happy-paws-site');
const outputDir = path.join(__dirname, '../org-sites');

// Create output directory
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

// Generate sites for each organization
Object.values(organizations).forEach(org => {
  console.log(`\n📁 Creating site for ${org.name}...`);
  
  const siteDir = path.join(outputDir, org.slug);
  
  // Remove existing directory if it exists
  if (fs.existsSync(siteDir)) {
    fs.rmSync(siteDir, { recursive: true, force: true });
  }
  
  // Copy template
  copyDirectory(templateDir, siteDir);
  
  // Create organization-specific configuration
  createOrgConfig(siteDir, org);
  
  // Update package.json
  updatePackageJson(siteDir, org);
  
  console.log(`✅ ${org.name} site created at: ${siteDir}`);
  console.log(`   🌐 Local URL: http://localhost:${org.port}`);
  console.log(`   🏢 Organization ID: ${org.id}`);
});

console.log('\n🎯 Next steps:');
console.log('1. Navigate to any organization site directory:');
Object.values(organizations).forEach(org => {
  console.log(`   cd org-sites/${org.slug}`);
});
console.log('2. Install dependencies: npm install');
console.log('3. Start development server: npm run dev');
console.log('4. Visit the local URL to see the organization-specific site');

console.log('\n📋 Organization Sites Created:');
Object.values(organizations).forEach(org => {
  console.log(`   ${org.name}: org-sites/${org.slug} (Port ${org.port})`);
});

/**
 * Copy directory recursively
 */
function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    // Skip certain directories and files
    if (shouldSkip(entry.name)) {
      continue;
    }
    
    if (entry.isDirectory()) {
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

/**
 * Check if file/directory should be skipped
 */
function shouldSkip(name) {
  const skipList = [
    'node_modules',
    '.git',
    'dist',
    '.astro',
    '.vercel',
    '.netlify',
    'coverage'
  ];
  return skipList.includes(name);
}

/**
 * Create organization-specific .env file
 */
function createOrgConfig(siteDir, org) {
  const envContent = `# ${org.name} Configuration
# Auto-generated by generate-multi-org-sites.js

# Organization Configuration
PUBLIC_ORG_ID=${org.id}
VITE_DEFAULT_ORG_ID=${org.id}
VITE_ORG_NAME="${org.name}"
VITE_ORG_SLUG="${org.slug}"

# Development Server
VITE_DEV_PORT=${org.port}

# Branding
VITE_PRIMARY_COLOR="${org.colors.primary}"
VITE_SECONDARY_COLOR="${org.colors.secondary}"

# Xano API Configuration (shared)
PUBLIC_XANO_BASE_URL=https://x8ki-letl-twmt.n7.xano.io/api:wPrzs4Mr
VITE_XANO_BASE_URL=https://x8ki-letl-twmt.n7.xano.io/api:wPrzs4Mr
VITE_XANO_AUTH_URL=https://x8ki-letl-twmt.n7.xano.io/api:XqEb_TVK
VITE_XANO_ORGANIZATIONS_URL=https://x8ki-letl-twmt.n7.xano.io/api:siXQEdjz
VITE_XANO_ANIMALS_URL=https://x8ki-letl-twmt.n7.xano.io/api:Od874PbA
VITE_XANO_PAGES_URL=https://x8ki-letl-twmt.n7.xano.io/api:mlssTgVM
VITE_XANO_TEMPLATES_URL=https://x8ki-letl-twmt.n7.xano.io/api:cz-ZpYmR
VITE_XANO_LIVE_SITE_URL=https://x8ki-letl-twmt.n7.xano.io/api:nS8IsiFR

# API Tokens (shared)
VITE_XANO_AUTH_TOKEN=mGDOpzrGb2PvfCn4tOJB7drqYvs
VITE_XANO_PAGES_TOKEN=YO8skT62RziHLczjvRGVKybGwlE
VITE_XANO_ANIMALS_TOKEN=165XkoniNXylFdNKgO_aCvmAIcQ
VITE_XANO_TEMPLATES_TOKEN=G6lpCML4kDSQm80gmftwv9V13VE
VITE_XANO_ORGANIZATIONS_TOKEN=YOUR_ORGANIZATIONS_TOKEN_HERE
VITE_XANO_LIVE_SITE_TOKEN=K-28mWB1YIThXyRkb4W_3Cfd0UA

# OpenAI Configuration (shared)
VITE_OPENAI_API_KEY=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
VITE_OPENAI_MODEL=gpt-4-1106-preview

# Environment
NODE_ENV=development
`;

  fs.writeFileSync(path.join(siteDir, '.env'), envContent);
}

/**
 * Update package.json with organization-specific information
 */
function updatePackageJson(siteDir, org) {
  const packageJsonPath = path.join(siteDir, 'package.json');
  
  if (fs.existsSync(packageJsonPath)) {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Update name and description
    packageJson.name = `${org.slug}-rescue-site`;
    packageJson.description = `Animal rescue website for ${org.name}`;
    
    // Add organization-specific metadata
    packageJson.organization = {
      id: org.id,
      name: org.name,
      slug: org.slug,
      type: 'animal-rescue'
    };
    
    // Update dev script to use custom port
    if (packageJson.scripts && packageJson.scripts.dev) {
      packageJson.scripts.dev = `astro dev --port ${org.port}`;
    }
    
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  }
}
